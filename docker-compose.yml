version: "3.1"

networks:
  net:
    driver: bridge

services:
  # checkout
  # pgbouncer
  pgbouncer-checkout:
    image: edoburu/pgbouncer
    environment:
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_HOST=postgres-checkout
      - DB_PORT=5433
      - DB_NAME=checkout
      - POOL_MODE=session
      - ADMIN_USERS=postgres,user
      - AUTH_TYPE=plain
      - LISTEN_PORT=6433
    ports:
      - "6433:6433"
    depends_on:
      - postgres-checkout
    networks:
      - net
  # database
  postgres-checkout:
    image: postgres:15.1
    environment:
      POSTGRES_DB: checkout
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - /tmp/checkout:/var/lib/postgresql/data
    ports:
      - 5433:5433
    command:
      - "postgres"
      - "-c"
      - "port=5433"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d checkout"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - net
  # service
  checkout:
    image: checkout
    build: ./checkout/
    container_name: 'checkout'
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://user:password@pgbouncer-checkout:6433/checkout?sslmode=disable
      - JAEGER_SERVICE_NAME=checkout
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831     
      - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1      
    ports:
      - "8080:8080"
      - "8090:8090"
      - "8070:8070"
    depends_on:
      - postgres-checkout
      - pgbouncer-checkout
      - jaeger
    networks:
      - net

  # loms
  # pgbouncer
  pgbouncer-loms:
    image: edoburu/pgbouncer
    environment:
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_HOST=postgres-loms
      - DB_PORT=5432
      - DB_NAME=loms
      - POOL_MODE=session
      - ADMIN_USERS=postgres,user
      - AUTH_TYPE=plain
      - LISTEN_PORT=6432
    ports:
      - "6432:6432"
    depends_on:
      - postgres-loms
    networks:
      - net
  # database
  postgres-loms:
    image: postgres:15.1
    environment:
      POSTGRES_DB: loms
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - /tmp/loms:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d loms"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - net
  #service
  loms:
    image: loms
    build: ./loms/
    container_name: 'loms'
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://user:password@pgbouncer-loms:6432/loms?sslmode=disable
      - JAEGER_SERVICE_NAME=loms
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831     
      - JAEGER_SAMPLER_MANAGER_HOST_PORT=jaeger:5778
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    ports:
      - "8081:8081"
    depends_on:
      - postgres-loms
      - pgbouncer-loms
      - kafka1
      - kafka2
      - kafka3
      - jaeger
    networks:
      - net

  # notifications
  # service
  notifications:
    image: notifications
    build: ./notifications/
    container_name: 'notifications'
    restart: unless-stopped
    ports:
      - "8082:8082"
    networks:
      - net

  # kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    environment:
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zookeeper:2888:3888
    networks:
      - net

  kafka1:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9091:9091"
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://kafka1:29091,LISTENER_EXT://0.0.0.0:9091
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://kafka1:29091,LISTENER_EXT://localhost:9091
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=1
      - KAFKA_LOG4J_ROOT_LOGLEVEL=ERROR
      - ZOOKEEPER=zookeeper:2181
    networks:
      - net

  kafka2:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://kafka2:29092,LISTENER_EXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://kafka2:29092,LISTENER_EXT://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=2
      - KAFKA_LOG4J_ROOT_LOGLEVEL=ERROR
      - ZOOKEEPER=zookeeper:2181
    networks:
      - net

  kafka3:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://kafka3:29093,LISTENER_EXT://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://kafka3:29093,LISTENER_EXT://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=3
      - KAFKA_LOG4J_ROOT_LOGLEVEL=ERROR
      - ZOOKEEPER=zookeeper:2181
    networks:
      - net

  # creating topic
  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka1
    networks:
      - net
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      sleep 60.0s

      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka1:29091 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka1:29091 --create --if-not-exists --topic orders --replication-factor 1 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka1:29091 --list
      "

  # jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.18
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686 # web
      - 14268:14268
      - 9411:9411
    labels:
      NAME: "jaeger"
    networks:
      - net

  # prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts.yml:/etc/prometheus/alerts.yml
    # extra_hosts:
    #   - host.docker.internal:host-gateway
    networks:
      - net
  # grafana
  grafana:
    image: grafana/grafana-oss
    ports:
      - 3000:3000
    volumes:
      - ./data:/var/lib/grafana
    links:
      - prometheus
    networks:
      - net



