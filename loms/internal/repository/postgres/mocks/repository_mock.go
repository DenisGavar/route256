// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	model "route256/loms/internal/domain/model"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockLomsRepository is a mock of LomsRepository interface.
type MockLomsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLomsRepositoryMockRecorder
}

// MockLomsRepositoryMockRecorder is the mock recorder for MockLomsRepository.
type MockLomsRepositoryMockRecorder struct {
	mock *MockLomsRepository
}

// NewMockLomsRepository creates a new mock instance.
func NewMockLomsRepository(ctrl *gomock.Controller) *MockLomsRepository {
	mock := &MockLomsRepository{ctrl: ctrl}
	mock.recorder = &MockLomsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLomsRepository) EXPECT() *MockLomsRepositoryMockRecorder {
	return m.recorder
}

// ChangeStatus mocks base method.
func (m *MockLomsRepository) ChangeStatus(ctx context.Context, orderId int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatus", ctx, orderId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatus indicates an expected call of ChangeStatus.
func (mr *MockLomsRepositoryMockRecorder) ChangeStatus(ctx, orderId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatus", reflect.TypeOf((*MockLomsRepository)(nil).ChangeStatus), ctx, orderId, status)
}

// ClearReserves mocks base method.
func (m *MockLomsRepository) ClearReserves(ctx context.Context, orderId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearReserves", ctx, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearReserves indicates an expected call of ClearReserves.
func (mr *MockLomsRepositoryMockRecorder) ClearReserves(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearReserves", reflect.TypeOf((*MockLomsRepository)(nil).ClearReserves), ctx, orderId)
}

// CreateOrder mocks base method.
func (m *MockLomsRepository) CreateOrder(ctx context.Context, createOrderRequest *model.CreateOrderRequest) (*model.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, createOrderRequest)
	ret0, _ := ret[0].(*model.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockLomsRepositoryMockRecorder) CreateOrder(ctx, createOrderRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockLomsRepository)(nil).CreateOrder), ctx, createOrderRequest)
}

// ListOrder mocks base method.
func (m *MockLomsRepository) ListOrder(ctx context.Context, listOrderRequest *model.ListOrderRequest) (*model.ListOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrder", ctx, listOrderRequest)
	ret0, _ := ret[0].(*model.ListOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrder indicates an expected call of ListOrder.
func (mr *MockLomsRepositoryMockRecorder) ListOrder(ctx, listOrderRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrder", reflect.TypeOf((*MockLomsRepository)(nil).ListOrder), ctx, listOrderRequest)
}

// MessageSent mocks base method.
func (m *MockLomsRepository) MessageSent(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageSent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageSent indicates an expected call of MessageSent.
func (mr *MockLomsRepositoryMockRecorder) MessageSent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageSent", reflect.TypeOf((*MockLomsRepository)(nil).MessageSent), ctx, id)
}

// MessagesToSend mocks base method.
func (m *MockLomsRepository) MessagesToSend(ctx context.Context) ([]*model.OrderMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagesToSend", ctx)
	ret0, _ := ret[0].([]*model.OrderMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagesToSend indicates an expected call of MessagesToSend.
func (mr *MockLomsRepositoryMockRecorder) MessagesToSend(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagesToSend", reflect.TypeOf((*MockLomsRepository)(nil).MessagesToSend), ctx)
}

// OrdersToCancel mocks base method.
func (m *MockLomsRepository) OrdersToCancel(ctx context.Context, time time.Time) ([]*model.CancelOrderRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersToCancel", ctx, time)
	ret0, _ := ret[0].([]*model.CancelOrderRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersToCancel indicates an expected call of OrdersToCancel.
func (mr *MockLomsRepositoryMockRecorder) OrdersToCancel(ctx, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersToCancel", reflect.TypeOf((*MockLomsRepository)(nil).OrdersToCancel), ctx, time)
}

// ReserveItems mocks base method.
func (m *MockLomsRepository) ReserveItems(ctx context.Context, orderId int64, req *model.ReserveStocksItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveItems", ctx, orderId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveItems indicates an expected call of ReserveItems.
func (mr *MockLomsRepositoryMockRecorder) ReserveItems(ctx, orderId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveItems", reflect.TypeOf((*MockLomsRepository)(nil).ReserveItems), ctx, orderId, req)
}

// Reserves mocks base method.
func (m *MockLomsRepository) Reserves(ctx context.Context, orderId int64) (*model.Reserve, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserves", ctx, orderId)
	ret0, _ := ret[0].(*model.Reserve)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reserves indicates an expected call of Reserves.
func (mr *MockLomsRepositoryMockRecorder) Reserves(ctx, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserves", reflect.TypeOf((*MockLomsRepository)(nil).Reserves), ctx, orderId)
}

// ReturnReserve mocks base method.
func (m *MockLomsRepository) ReturnReserve(ctx context.Context, reserveStocksItem *model.ReserveStocksItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnReserve", ctx, reserveStocksItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnReserve indicates an expected call of ReturnReserve.
func (mr *MockLomsRepositoryMockRecorder) ReturnReserve(ctx, reserveStocksItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnReserve", reflect.TypeOf((*MockLomsRepository)(nil).ReturnReserve), ctx, reserveStocksItem)
}

// Stocks mocks base method.
func (m *MockLomsRepository) Stocks(ctx context.Context, stocksRequest *model.StocksRequest) (*model.StocksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stocks", ctx, stocksRequest)
	ret0, _ := ret[0].(*model.StocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stocks indicates an expected call of Stocks.
func (mr *MockLomsRepositoryMockRecorder) Stocks(ctx, stocksRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stocks", reflect.TypeOf((*MockLomsRepository)(nil).Stocks), ctx, stocksRequest)
}
