// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	loms_v1 "route256/loms/pkg/loms_v1"

	gomock "github.com/golang/mock/gomock"
)

// MockLomsClient is a mock of LomsClient interface.
type MockLomsClient struct {
	ctrl     *gomock.Controller
	recorder *MockLomsClientMockRecorder
}

// MockLomsClientMockRecorder is the mock recorder for MockLomsClient.
type MockLomsClientMockRecorder struct {
	mock *MockLomsClient
}

// NewMockLomsClient creates a new mock instance.
func NewMockLomsClient(ctrl *gomock.Controller) *MockLomsClient {
	mock := &MockLomsClient{ctrl: ctrl}
	mock.recorder = &MockLomsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLomsClient) EXPECT() *MockLomsClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockLomsClient) CreateOrder(arg0 context.Context, arg1 *loms_v1.CreateOrderRequest) (*loms_v1.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*loms_v1.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockLomsClientMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockLomsClient)(nil).CreateOrder), arg0, arg1)
}

// Stocks mocks base method.
func (m *MockLomsClient) Stocks(arg0 context.Context, arg1 *loms_v1.StocksRequest) (*loms_v1.StocksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stocks", arg0, arg1)
	ret0, _ := ret[0].(*loms_v1.StocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stocks indicates an expected call of Stocks.
func (mr *MockLomsClientMockRecorder) Stocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stocks", reflect.TypeOf((*MockLomsClient)(nil).Stocks), arg0, arg1)
}
